## Place your answers here.
All the Exercises and challenge are not hard.But the strings and
XMLHttpRequest are annoying.
For the setTimeout, it works for me when set to 0. If it doesn't work
for you. Many reasons like browser versions, performance etc. To pass
the test, you can change the time larger for the browser to load.
* Exercise 1: Cookie Theft
See Code below:  we can use the value of <input name="user".. > to
inject javascript code.Use something like user="size%3D"10">", we can
close the input tag.Then use <script></script> to inject our code.
In the script, when the request is reponsed(onload), we need to
delete unnecessary nodes to keep the website looking as before. Then
steal the cookie with the help of getItme from
https://developer.mozilla.org/en-US/docs/Web/API/document.cookie. Then
use the emacs script by encoding URL.
[users.py]
...
 args['req_user'] = Markup(request.args.get('user', ''))
...
  return render_template('users.html', **args)
...
[users.html]
...
<input type="text" name="user" value="{{ req_user }}"
size=10></nobr><br>
...
* Exercise 2: Cross-Site Request Forgery
submit returns a new page, so we make the submit target to iframe.
We can either listen to iframe onload(or just onload function) or use
setTimeout to open the html like http://css.csail.mit.edu/6.858/2013/.
1. Create form(zoobars, recpient, action) with target to an iframe
2. After submiting the form and the transfer is complete, redirect to
   http://css.csail.mit.edu/6.858/2013/.(Here we can listen to iframe
   onload event or use setTimeout).
* Exercise 3: Side Channels and Phishing.
Important Note: due to the css of (zoobar/media/zoobar.css), the
font-family is sans-serif, which depends on the environment.
Especially, when you open the fake login page like file://XXX, the
font depends on you browser and os etc.So if you see the font of fake
zoobar login page is not the same, please check the way you open and
your default setting.
1. Load script from "http://localhost:8080/zoobar/index.cgi/zoobarjs";
2. If the user is login, then the script will put value into element
   of id='myZoobars', and we can use this to check if the user is
   login.
3. if the user is login, use method from exercise2
4. if the user is logout, present the fake login. When the user login
   the fake website, we send the username and pwd to email and
   redirect the true website.
* Exercise 4: Profile Worm.
1. First, we steal the zoobar as the same way of exercise 2
2. Then, we create a xmlHttp post request to update the victim's
   profile
3. To keep "the user whose profile is being viewed should appear to
   have 10 zoobars, and no transfer log entries.", we create a tag
   with className 10, which is used to update zoobars by showZoobars
   function.
4. Set the transfer log entries to be empty by setting the specific
   element(remove tbody1 childrens except the first child) innerHTML
   empty. Because the request returns a new page. We need use
   setTimout to clear the log entries.(for me, setTimeout({}, 0)
   works).The time of setTimeout should be set properly. After the
   new page refresh, it should be fast enough to clear it.
Important Note: if we hack it by iframe, the way to steal is the
same, but we submit a update profile form with target to invisible
iframe. And pre create a showZoobars function to update.But we don't
need to use setTimeout to clear transfer log entries, we can just
fake the log as the content is not refresh.
* Challenge: Password Theft.
Inject code to http://localhost:8080/zoobar/index.cgi/login.
1. Post a request to http://localhost:8080/zoobar/index.cgi/login of
   our injected code with the help of 'post' function. The 'post'
   function just create a form on the fly, and set proper (k,v).
2. The injected code do several things. First the code removes the
   warning to keep the website normal.Then it hacked the 'onclick'
   function of 'Log in' button.In the hacked 'onclick' function, we
   first get the username and pwd, then use the email script to steal
   the username and pwd.
3. In the injected code, we use setTimeout again
   because for the time the script is executing, the 'warning'
   message and other stuff are not ready. The time of setTimeout
   should be set properly.It should faster enough and before the user
   click the button.
